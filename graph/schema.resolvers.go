package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/muhwyndhamhp/tigerhall-kittens/graph/model"
)

// CreateTiger is the resolver for the createTiger field.
func (r *mutationResolver) CreateTiger(ctx context.Context, input model.NewTiger) (*model.Tiger, error) {
	panic(fmt.Errorf("not implemented: CreateTiger - createTiger"))
}

// CreateSighting is the resolver for the createSighting field.
func (r *mutationResolver) CreateSighting(ctx context.Context, input model.NewSighting) (*model.Sighting, error) {
	panic(fmt.Errorf("not implemented: CreateSighting - createSighting"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Tigers is the resolver for the tigers field.
func (r *queryResolver) Tigers(ctx context.Context, page int, pageSize *int) ([]*model.Tiger, error) {
	panic(fmt.Errorf("not implemented: Tigers - tigers"))
}

// Sightings is the resolver for the sightings field.
func (r *queryResolver) Sightings(ctx context.Context, tigerID uint, page int, pageSize int) ([]*model.Sighting, error) {
	panic(fmt.Errorf("not implemented: Sightings - sightings"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
