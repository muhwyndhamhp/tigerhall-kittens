// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/muhwyndhamhp/tigerhall-kittens/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// TokenHistoryRepository is an autogenerated mock type for the TokenHistoryRepository type
type TokenHistoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, token
func (_m *TokenHistoryRepository) Create(ctx context.Context, token *entities.TokenHistory) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.TokenHistory) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByToken provides a mock function with given fields: ctx, token
func (_m *TokenHistoryRepository) FindByToken(ctx context.Context, token string) (*entities.TokenHistory, error) {
	ret := _m.Called(ctx, token)

	var r0 *entities.TokenHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.TokenHistory, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.TokenHistory); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TokenHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenHistoryRepository creates a new instance of TokenHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenHistoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenHistoryRepository {
	mock := &TokenHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
