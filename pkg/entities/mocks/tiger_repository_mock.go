// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/muhwyndhamhp/tigerhall-kittens/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// TigerRepository is an autogenerated mock type for the TigerRepository type
type TigerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tiger
func (_m *TigerRepository) Create(ctx context.Context, tiger *entities.Tiger) error {
	ret := _m.Called(ctx, tiger)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Tiger) error); ok {
		r0 = rf(ctx, tiger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, page, pageSize
func (_m *TigerRepository) FindAll(ctx context.Context, page int, pageSize int) ([]entities.Tiger, int, error) {
	ret := _m.Called(ctx, page, pageSize)

	var r0 []entities.Tiger
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]entities.Tiger, int, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entities.Tiger); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Tiger)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *TigerRepository) FindByID(ctx context.Context, id uint) (*entities.Tiger, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Tiger
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entities.Tiger, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entities.Tiger); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Tiger)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tiger, id
func (_m *TigerRepository) Update(ctx context.Context, tiger *entities.Tiger, id uint) error {
	ret := _m.Called(ctx, tiger, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Tiger, uint) error); ok {
		r0 = rf(ctx, tiger, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTigerRepository creates a new instance of TigerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTigerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TigerRepository {
	mock := &TigerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
