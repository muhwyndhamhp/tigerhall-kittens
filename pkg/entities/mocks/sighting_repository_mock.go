// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/muhwyndhamhp/tigerhall-kittens/pkg/entities"
	mock "github.com/stretchr/testify/mock"

	scopes "github.com/muhwyndhamhp/tigerhall-kittens/utils/scopes"
)

// SightingRepository is an autogenerated mock type for the SightingRepository type
type SightingRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, sighting
func (_m *SightingRepository) Create(ctx context.Context, sighting *entities.Sighting) error {
	ret := _m.Called(ctx, sighting)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Sighting) error); ok {
		r0 = rf(ctx, sighting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByTigerID provides a mock function with given fields: ctx, tigerID, preloads, page, pageSize
func (_m *SightingRepository) FindByTigerID(ctx context.Context, tigerID uint, preloads []scopes.Preload, page int, pageSize int) ([]entities.Sighting, int, error) {
	ret := _m.Called(ctx, tigerID, preloads, page, pageSize)

	var r0 []entities.Sighting
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, []scopes.Preload, int, int) ([]entities.Sighting, int, error)); ok {
		return rf(ctx, tigerID, preloads, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, []scopes.Preload, int, int) []entities.Sighting); ok {
		r0 = rf(ctx, tigerID, preloads, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Sighting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, []scopes.Preload, int, int) int); ok {
		r1 = rf(ctx, tigerID, preloads, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint, []scopes.Preload, int, int) error); ok {
		r2 = rf(ctx, tigerID, preloads, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewSightingRepository creates a new instance of SightingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSightingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SightingRepository {
	mock := &SightingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
